user  nginx;
worker_processes  2;

# error_log  /var/log/nginx/error.log warn;
error_log  /dev/null;
pid        /var/run/nginx.pid;

worker_rlimit_nofile 50000;
events {

    #
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n / worker_processes`
    #
    worker_connections  1024;

    #
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    #
    multi_accept on;

    #
    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    #
    use epoll;
}

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  /var/log/nginx/access.log  main;
    access_log off;
    # to boost I/O on HDD we can disable access logs
    # this prevent nginx from logging every action in a log file named `access.log`.

    #
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    #
    sendfile on;
    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    #
    # don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    #
    tcp_nodelay on;


    #
    # Every 60 seconds server broadcasts Sync packets, so 90 is
    # a conservative upper bound.
    #
    keepalive_time 1h;
    keepalive_timeout 90; # default 65
    send_timeout 120;     # default 60

    #
    # Allow the server to close the connection after a client stops
    # responding.
    # Frees up socket-associated memory.
    #
    reset_timedout_connection on;

    # gzip  on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 2;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_min_length 256;
    # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # reduces the data that needs to be sent over the network

    upstream api {
        # keepalive 256;
        # keepalive_requests 10000;
        
        # server app1:3000;
        # server app2:3000;

        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
    }

    server {
        
        listen 9999;   

        server_name localhost;

        access_log off;
        # access_log /var/log/nginx/access.log;
        # error_log /dev/null crit;
        error_log  /var/log/nginx/error.log;
        # to boost I/O on HDD we can disable access logs
        # this prevent nginx from logging every action in a log file named `access.log`.

        location / {
            proxy_http_version 1.1;
            # proxy_buffering on;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://api;
        }
    }

    # include /etc/nginx/conf.d/*.conf;
}